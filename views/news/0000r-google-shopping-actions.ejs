<!doctype html>
<!--[if lt IE 7]>      <html class="no-js lt-ie9 lt-ie8 lt-ie7" lang=""> <![endif]-->
<!--[if IE 7]>         <html class="no-js lt-ie9 lt-ie8" lang=""> <![endif]-->
<!--[if IE 8]>         <html class="no-js lt-ie9" lang=""> <![endif]-->
<!--[if gt IE 8]><!-->
<html dir="ltr" lang="es" xml:lang="es" class="js js canvas fontface generatedcontent wf-proximanova-n7-active wf-proximanova-i7-active wf-proximanova-n4-active wf-proximanova-i4-active wf-brandongrotesque-n7-active wf-active"><!--<![endif]-->
	<head> 
		<meta charset="UTF-8">
		<meta http-equiv="X-UA-Compatible" content="IE=edge">
		<meta name="viewport" content="width=device-width, initial-scale=1">
		
		<!-- Chrome, Firefox OS, Opera and Vivaldi -->
		<meta name="theme-color" content="#537b7b">
		<!-- iOs Safari -->
		<meta name="apple-mobile-web-app-status-bar-style" content="#537b7b">
		<!-- Windows Phone -->
		<meta name="msapplication-navbutton-color" content="#537b7b">

		<title>Ayuda para mi Web | Todo lo necesarío para crear una web</title>
		<meta name="description" content="Todo lo necesarío para crear una web" />
		<meta name="author" content="Sucender" />

		<% include ../partials/head.ejs %>	
	</head>
	
	<body id="codrops-body">
		<!-- BuySellAds.com Ad Code -->
		<script type="text/javascript">
			(function(){
				var bsa = document.createElement('script');
				bsa.type = 'text/javascript';
				bsa.async = true;
				bsa.src = '//s3.buysellads.com/ac/bsa.js';
				(document.getElementsByTagName('head')[0]||document.getElementsByTagName('body')[0]).appendChild(bsa);
			})();
		</script>
		<!-- END BuySellAds.com Ad Code -->	
				
		<div class="ct-container">
			
			<header class="ct-header">
				<div class="ct-inner ct-cf">

						<div class="ct-branding">
							<a class="ct-logo" href="/" rel="home">Ayuda para mi Web</a>
						</div>
					
					<div class="ct-nav-wrapper">
						<nav class="ct-nav-main">
						   <ul>
								<li><a href="/">Desarrollo</a></li>
								<li><a href="/">Posicionamiento SEO</a></li>
								<li><a href="/">Herramientas</a></li>
								<li><a href="/">Experimentos</a></li>
								<li><a href="/">Experiencias</a></li>
							</ul>
						</nav>
					</div>

					<div class="ct-header-items-right ct-cf">
						<div class="ct-search" id="ct-search">
							<form method="get" id="searchform" action="http://www.ayudaparamiweb.com">
								<div class="ct-search-input-wrap">
									<span class="twitter-typeahead" style="position: relative; display: inline-block;"><input class="tt-hint" type="text" autocomplete="off" spellcheck="off" disabled="" style="position: absolute; top: 0px; left: 0px; border-color: transparent; box-shadow: none; background: none 0% 0% / auto repeat scroll padding-box border-box rgb(255, 255, 255);"><input class="ct-search-input tt-query" placeholder="Buscar en Ayuda para mi Web..." type="text" value="" name="s" id="s" autocomplete="off" spellcheck="false" dir="auto" style="position: relative; vertical-align: top; background-color: transparent;"><span style="position: absolute; left: -9999px; visibility: hidden; white-space: nowrap; font-family: proxima-nova, &quot;Proxima Nova&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 13px; font-style: normal; font-variant: normal; font-weight: 700; word-spacing: 0px; letter-spacing: 0px; text-indent: 0px; text-rendering: auto; text-transform: none;"></span><span class="tt-dropdown-menu" style="position: absolute; top: 100%; left: 0px; z-index: 100; display: none;"></span></span>
								</div>
								<input type="hidden" name="search-type" value="posts">
								<input class="ct-search-submit" type="submit" id="go" value=""><span class="ct-icon-search"></span>
							</form>
						</div>
						<ul class="ct-connect">
							<li><a class="ct-icon-twitter" href="http://www.twitter.com/"><span>Ayuda para mi Web en Twitter</span></a></li>
							<li><a class="ct-icon-facebook" href="http://www.facebook.com/"><span>Ayuda para mi Web en Facebook</span></a></li>
							<li><a class="ct-icon-google-plus" href="https://plus.google.com/" rel="publisher"><span>Ayuda para mi Web en Google+</span></a></li>
						    <li><a class="ct-icon-github" href="https://github.com/"><span>Ayuda para mi Web en Github</span></a></li>
						</ul>
					</div><!--/ct-header-items-right-->

				</div><!-- ct-inner -->
			</header>
			
		<div class="ct-content">

			<div class="ct-inner">
			
				<div class="ct-main ct-main-post" id="ct-main" role="main">
					<div class="ct-post">
						<article id="post-33985" class="post-33985 post type-post status-publish format-standard has-post-thumbnail hentry category-tutorials tag-animation tag-canvas tag-slideshow">
							<header>
								<div class="ct-subline entry-meta ">
																				<img alt="" src="http://www.ayudaparamiweb.com/img/author/sucender.png" srcset="img/author/sucender.png" class="avatar avatar-36 photo" height="36" width="36">																		<div class="ct-subline__author">
																					<span class="byline author vcard"><a href="http://www.ayudaparamiweb.com/" title="Posts by Sucender" rel="author">Sucender</a></span>
											in 
																				<a href="http://www.ayudaparamiweb.com/">Tutorials</a>
									</div>
									<div class="ct-subline__time">
										<time class="ct-subline__pubtime" pubdate="pubdate">2018/02/21</time> 
										7 Comments																		</div>
																	</div>
								<h1 class="ct-h-shd entry-title">Quantum Pacific Group: El nuevo accionista del Atlético</h1>
							</header>		
							<div class="ct-post-content">
								<div class="ct-post-excerpt">A tutorial on how to create an experimental slideshow that animates in fragments. The slider is powered by the "Pieces" library, which was created for achieving interesting effects like these easily.</div>								<div class="ct-ad-article-wrapper">
									<div class="ct-ad-article">
										<div id="bsap_1277316" class="bsap bsap_1277316" data-serve="CKYDK5T">
<style type="text/css">
div.bsap_1277316{width:100%;display:block;}div.bsap_1277316 a{width:728px;}div.bsap_1277316 a img{padding:0;}div.bsap_1277316 a em{font-style:normal;}div.bsap_1277316 a{display:block;font-size:11px;color:#888;font-family:verdana,sans-serif;margin:0;text-align:center;text-decoration:none;overflow:hidden;float:left;}
div.bsap_1277316 img{border:0;clear:right;}
div.bsap_1277316 a.adhere{color:#666;font-weight:bold;font-size:12px;border:1px solid #ccc;background:#e7e7e7;text-align:center;}
div.bsap_1277316 a.adhere:hover{border:1px solid #999;background:#ddd;color:#333;}div.bsap_1277316 a{line-height:100%;}div.bsap_1277316 a.adhere{width:728px;height:90px;line-height:720%;}html>body div.bsap_1277316 a.adhere{width:726px;height:88px;}div.bsap_1277316 img.s{height:0;width:0;}div.bsap_1277316{line-height:9px;}div.bsap_1277316 .bsap_adhere2,div.bsap_1277316 iframe{float:left;}div.bsap_1277316 .bsap_adhere2 a{height:90px;width:20px;background:url(http:\/\/s3.buysellads.com\/ac\/ah20x90_1.gif) no-repeat 0 0;text-indent:-9999px;}
</style>
<iframe width="728" height="90" id="ad_1277316_backfill1_frame" src="//cdn.adfront.org/1277316/raw_e9141600a725017a6d8a9ae62c78ad89.html" frameborder="0" class="bsap_adframe" scrolling="no"></iframe>

<script type="text/javascript" id="auto_1" class="ignoreme"> if (typeof(_bsap_serving_callback) !== 'undefined') _bsap_serving_callback(64024, 'CKYDK5T', ''); </script>
<script type="text/javascript" id="auto_2" class="ignoreme"> if (typeof(BSACallback) !== 'undefined') BSACallback(); </script></div>
									</div>
								</div>

									
																
								<p>Today we’d like to show you how to create a playful slider with an original fragmented look. Each element of the slider will be divided into pieces that will animate in different ways, using <a href="https://github.com/ayudaparamiweb/pieces" target="_blank">Pieces</a>, a library that I’ve created for achieving interesting effects like these easily.</p>
<div class="ct-featured-img-rss"><img src="https://codropspz-tympanus.netdna-ssl.com/codrops/wp-content/uploads/2018/02/PiecesSlider.jpg" alt="PiecesSlider" width="800" height="600" class="alignnone size-full wp-image-34093" srcset="https://codropspz-tympanus.netdna-ssl.com/codrops/wp-content/uploads/2018/02/PiecesSlider.jpg 800w, https://codropspz-tympanus.netdna-ssl.com/codrops/wp-content/uploads/2018/02/PiecesSlider-300x225.jpg 300w, https://codropspz-tympanus.netdna-ssl.com/codrops/wp-content/uploads/2018/02/PiecesSlider-768x576.jpg 768w" sizes="(max-width: 800px) 100vw, 800px"></div>
<p>This will be the final result:</p>
<p><img src="https://codropspz-tympanus.netdna-ssl.com/codrops/wp-content/uploads/2018/02/PiecesSlider.gif" alt="PiecesSlider" width="600" height="456" class="alignnone size-full wp-image-34094"></p>
<p>The animations are powered by <a href="http://animejs.com/">anime.js</a>.</p>
<p><strong>The demo is kindly sponsored by: <a href="http://go.thoughtleaders.io/NorthwesternCodrops200218" rel="nofollow">Northwestern’s Online Master’s in Information Design and Strategy</a></strong>.<br>
<em>If you would like to sponsor one of our demos, find out more here.</em></p>
<h2>The original idea</h2>
<p>The source of inspiration for this kind of effect came from the Dribbble shot <a href="https://dribbble.com/shots/3849329-Shift-Animation" target="_blank">Shift Animation</a> by Alexander Saunki:</p>
<figure id="attachment_33987" aria-describedby="figcaption_attachment_33987" class="wp-caption alignnone" itemscope="" itemtype="http://schema.org/ImageObject" style="width: 400px"><img itemprop="contentURL" src="https://codropspz-tympanus.netdna-ssl.com/codrops/wp-content/uploads/2018/02/shift-animation.gif" alt="Shift Animation" width="400" height="300" class="size-full wp-image-33987"><figcaption id="figcaption_attachment_33987" class="wp-caption-text" itemprop="description">Shift Animation</figcaption></figure>
<p>Since I saw it, I wanted to implement an effect like that for my new personal website, which I recently launched: <a href="http://www.ayudaparamiweb.com/" target="_blank">www.ayudaparamiweb.com</a>.</p>
<p>To achieve the desired effects, I developed a library that I called “Pieces”, since it allows to draw and animate text, images and SVG paths through rectangular pieces. So, without further ado, let’s see how to use this library!</p>
<h2>Getting started with Pieces</h2>
<p>All the detailed documentation about the Pieces library can be found in its <a href="https://github.com/ayudaparamiweb/pieces" target="_blank">Github repository</a>. But anyway, let’s quickly see some essential concepts to be able to start using this library.</p>
<p>Assuming that we want to draw and animate an image, these are the basic elements that make up the scene:</p>
<figure id="attachment_33988" aria-describedby="figcaption_attachment_33988" class="wp-caption alignnone" itemscope="" itemtype="http://schema.org/ImageObject" style="width: 600px"><img itemprop="contentURL" src="https://codropspz-tympanus.netdna-ssl.com/codrops/wp-content/uploads/2018/02/pieces-data.png" alt="Pieces Basic Elements" width="600" height="500" class="size-full wp-image-33988" srcset="https://codropspz-tympanus.netdna-ssl.com/codrops/wp-content/uploads/2018/02/pieces-data.png 600w, https://codropspz-tympanus.netdna-ssl.com/codrops/wp-content/uploads/2018/02/pieces-data-300x250.png 300w" sizes="(max-width: 600px) 100vw, 600px"><figcaption id="figcaption_attachment_33988" class="wp-caption-text" itemprop="description">Pieces Basic Elements</figcaption></figure>
<p>As you can see, the image we want to draw will be our <code>item</code>, which will be divided into several <code>pieces</code>, which can also vary in size and position according to the options we define. To see all the possible options I recommend you check out the <a href="https://github.com/ayudaparamiweb/pieces" target="_blank">documentation on Github</a>.</p>
<p>Throughout the tutorial we will explain each piece of code, so you can learn how to implement your own animations using the Pieces library. Let’s start!</p>
<h2>HTML Structure</h2>
<p>Before starting to write Javascript code, let’s see how we have defined the HTML for our slider. The markup is quite simple, since we have each slide with a corresponding image and text, the <code>canvas</code> element to animate things, and buttons to navigate through the slider.</p>
<pre class="brush:html hljs xml"><code><span class="hljs-comment">&lt;!-- Pieces Slider --&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"pieces-slider"</span>&gt;</span>
    <span class="hljs-comment">&lt;!-- Each slide with corresponding image and text --&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"pieces-slider__slide"</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"pieces-slider__image"</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"img/ricardo-gomez-angel-381749.jpg"</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">""</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"pieces-slider__text"</span>&gt;</span>Ricardo Gomez Angel<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"pieces-slider__slide"</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"pieces-slider__image"</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"img/josh-calabrese-527813.jpg"</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">""</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"pieces-slider__text"</span>&gt;</span>Josh Calabrese<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"pieces-slider__slide"</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"pieces-slider__image"</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"img/samuel-zeller-103111.jpg"</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">""</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"pieces-slider__text"</span>&gt;</span>Samuel Zeller<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"pieces-slider__slide"</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"pieces-slider__image"</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"img/sweet-ice-cream-photography-143023.jpg"</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">""</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"pieces-slider__text"</span>&gt;</span>Sweet Ice Cream<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"pieces-slider__slide"</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"pieces-slider__image"</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"img/sticker-mule-199237.jpg"</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">""</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"pieces-slider__text"</span>&gt;</span>Sticker Mule<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
    <span class="hljs-comment">&lt;!-- Canvas to draw the pieces --&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">canvas</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"pieces-slider__canvas"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">canvas</span>&gt;</span>
    <span class="hljs-comment">&lt;!-- Slider buttons: prev and next --&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"pieces-slider__button pieces-slider__button--prev"</span>&gt;</span>prev<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"pieces-slider__button pieces-slider__button--next"</span>&gt;</span>next<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></code></pre>
<h2>Styling the slider</h2>
<p>The slideshow needs some special styling for our effect. We’ll need to hide the images and texts as we’ll be redrawing them with our library. But we also want them to fallback to their initial markup if no JavaScript is available. Finally, we need to make sure that the slider is responsive with a couple of media queries:</p>
<pre class="brush:css hljs"><code><span class="hljs-selector-class">.pieces-slider</span> {
    <span class="hljs-attribute">position</span>: relative;
    <span class="hljs-attribute">text-align</span>: center;
    <span class="hljs-attribute">padding</span>: <span class="hljs-number">8rem</span> <span class="hljs-number">0</span>;
}

<span class="hljs-selector-class">.js</span> <span class="hljs-selector-class">.pieces-slider</span> {
    <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;
}

<span class="hljs-comment">/* Make all slides absolutes and hide them */</span>
<span class="hljs-selector-class">.js</span> <span class="hljs-selector-class">.pieces-slider__slide</span> {
    <span class="hljs-attribute">position</span>: absolute;
    <span class="hljs-attribute">right</span>: <span class="hljs-number">100%</span>;
}

<span class="hljs-comment">/* Define image dimensions and also hide them */</span>
<span class="hljs-selector-class">.pieces-slider__image</span> {
    <span class="hljs-attribute">max-width</span>: <span class="hljs-number">600px</span>;
    <span class="hljs-attribute">max-height</span>: <span class="hljs-number">400px</span>;
}

<span class="hljs-selector-class">.js</span> <span class="hljs-selector-class">.pieces-slider__image</span> {
    <span class="hljs-attribute">visibility</span>: hidden;
}

<span class="hljs-comment">/* Hide the titles */</span>
<span class="hljs-selector-class">.js</span> <span class="hljs-selector-class">.pieces-slider__text</span> {
    <span class="hljs-attribute">text-indent</span>: -<span class="hljs-number">9999px</span>;
}

<span class="hljs-comment">/* Canvas with viewport width and height */</span>
<span class="hljs-selector-class">.js</span> <span class="hljs-selector-class">.pieces-slider__canvas</span> {
    <span class="hljs-attribute">position</span>: relative;
    <span class="hljs-attribute">width</span>: <span class="hljs-number">100vw</span>;
    <span class="hljs-attribute">height</span>: <span class="hljs-number">100vh</span>;
    <span class="hljs-attribute">transition</span>: <span class="hljs-number">0.2s</span> opacity;
}

<span class="hljs-comment">/* Class for when we resize */</span>
<span class="hljs-selector-class">.pieces-slider__canvas--hidden</span> {
    <span class="hljs-attribute">opacity</span>: <span class="hljs-number">0</span>;
    <span class="hljs-attribute">transition-duration</span>: <span class="hljs-number">0.3s</span>;
}

<span class="hljs-comment">/* Navigation buttons */</span>
<span class="hljs-selector-class">.pieces-slider__button</span> {
    <span class="hljs-attribute">position</span>: absolute;
    <span class="hljs-attribute">left</span>: <span class="hljs-number">0</span>;
    <span class="hljs-attribute">top</span>: <span class="hljs-number">50%</span>;
    <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;
    <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;
    <span class="hljs-attribute">margin</span>: -<span class="hljs-number">25px</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span>;
    <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#5104ab</span>;
    <span class="hljs-attribute">color</span>: <span class="hljs-number">#fff</span>;
    <span class="hljs-attribute">font-family</span>: inherit;
    <span class="hljs-attribute">font-weight</span>: bold;
    <span class="hljs-attribute">border</span>: none;
    <span class="hljs-attribute">cursor</span>: pointer;
    <span class="hljs-attribute">transition</span>: <span class="hljs-number">0.1s</span> background-color;
}

<span class="hljs-selector-class">.pieces-slider__button</span><span class="hljs-selector-pseudo">:hover</span> {
    <span class="hljs-attribute">background</span>: <span class="hljs-number">#5f3abf</span>;
}

<span class="hljs-selector-class">.pieces-slider__button--next</span> {
    <span class="hljs-attribute">left</span>: auto;
    <span class="hljs-attribute">right</span>: <span class="hljs-number">0</span>;
}

<span class="hljs-comment">/* Hide the buttons when no JS */</span>
<span class="hljs-selector-class">.no-js</span> <span class="hljs-selector-class">.pieces-slider__button</span> {
    <span class="hljs-attribute">display</span>: none;
}

<span class="hljs-comment">/* Media queries with styles for smaller screens */</span>
@<span class="hljs-keyword">media</span> screen and (max-width: <span class="hljs-number">720px</span>) {
    <span class="hljs-selector-class">.pieces-slider__image</span> {
        <span class="hljs-attribute">max-width</span>: <span class="hljs-number">300px</span>;
    }
}

@<span class="hljs-keyword">media</span> screen and (max-width: <span class="hljs-number">55em</span>) {
    <span class="hljs-selector-class">.pieces-slider__canvas</span> {
        <span class="hljs-attribute">width</span>: <span class="hljs-number">100vw</span>;
        <span class="hljs-attribute">height</span>: <span class="hljs-number">100vw</span>;
    }
    <span class="hljs-selector-class">.pieces-slider__button</span> {
        <span class="hljs-attribute">width</span>: <span class="hljs-number">60px</span>;
        <span class="hljs-attribute">height</span>: <span class="hljs-number">60px</span>;
    }
}</code></pre>
<p>As you can see, we have hidden the HTML elements that we defined for our slider (except for the buttons), since we will draw everything in the <code>canvas</code> element.</p>
<div class="ct-ad-article-wrapper ct-ad-article-wrapper-in"><div class="ct-ad-article"><img class="ct-ad-img" src="https://codropspz-tympanus.netdna-ssl.com/codrops/wp-content/themes/codropstheme03/images/advertisement.jpg"><div id="bsap_1279993" class="bsap bsap_1279993" data-serve="CKYDK5V"><a href="//srv.buysellads.com/ads/click/x/GTND42QLCT7DV2JWF67LYKQMCVYD62QICVYDLZ3JCW7DTKJWFTAI52JKC6BI6K3LCEBDTK3EHJNCLSIZ" class="ad0 odd " title="The Ultimate WordPress Theme" id="bsa_11321" target="_blank" rel="nofollow">
<img src="//s3.buysellads.com/1279993/223422-1400703282.jpg" width="728" height="90" alt=""></a>
<script type="text/javascript" id="auto_3" class="ignoreme"> if (typeof(BSACallback) !== 'undefined') BSACallback(); </script></div><div style="clear:both;"></div></div></div>
<h2>Using Pieces to animate the slider</h2>
<p>Let’s start by defining some variables and getting the slider info from the DOM:</p>
<pre class="brush:js hljs javascript"><code><span class="hljs-comment">// Get all images and texts, get the `canvas` element, and save slider length</span>
<span class="hljs-keyword">var</span> sliderCanvas = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">'.pieces-slider__canvas'</span>);
<span class="hljs-keyword">var</span> imagesEl = [].slice.call(<span class="hljs-built_in">document</span>.querySelectorAll(<span class="hljs-string">'.pieces-slider__image'</span>));
<span class="hljs-keyword">var</span> textEl = [].slice.call(<span class="hljs-built_in">document</span>.querySelectorAll(<span class="hljs-string">'.pieces-slider__text'</span>));
<span class="hljs-keyword">var</span> slidesLength = imagesEl.length;
</code></pre>
<p>Then we need to define indexes variables to handle all the items we will draw on the canvas:</p>
<pre class="brush:js hljs php"><code><span class="hljs-comment">// Define indexes related variables, as we will use indexes to reference items</span>
<span class="hljs-keyword">var</span> currentIndex = <span class="hljs-number">0</span>, currentImageIndex, currentTextIndex, currentNumberIndex;
<span class="hljs-keyword">var</span> textIndexes = [];
<span class="hljs-keyword">var</span> numberIndexes = [];

<span class="hljs-comment">// Update current indexes for image, text and number</span>
<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">updateIndexes</span><span class="hljs-params">()</span> </span>{
    currentImageIndex = currentIndex * <span class="hljs-number">3</span>;
    currentTextIndex = currentImageIndex + <span class="hljs-number">1</span>;
    currentNumberIndex = currentImageIndex + <span class="hljs-number">2</span>;
}
updateIndexes();
</code></pre>
<p>Now we will start defining the options for each type of item (image, text, number and button). You can find a complete reference in the Pieces documentation, but here is a detailed explanation for each option used to draw the images:</p>
<pre class="brush:js hljs php"><code><span class="hljs-comment">// Options for images</span>
<span class="hljs-keyword">var</span> imageOptions = {
    angle: <span class="hljs-number">45</span>, <span class="hljs-comment">// rotate item pieces 45deg</span>
    extraSpacing: {extraX: <span class="hljs-number">100</span>, extraY: <span class="hljs-number">200</span>}, <span class="hljs-comment">// this extra spacing is needed to cover all the item, because angle != 0</span>
    piecesWidth: <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span> </span>{ <span class="hljs-keyword">return</span> Pieces.random(<span class="hljs-number">50</span>, <span class="hljs-number">200</span>); }, <span class="hljs-comment">// every piece will have a random width between 50px and 200px</span>
    ty: <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span> </span>{ <span class="hljs-keyword">return</span> Pieces.random(<span class="hljs-number">-400</span>, <span class="hljs-number">400</span>); } <span class="hljs-comment">// every piece will be translated in the Y axis a random distance between -400px and 400px</span>
};
</code></pre>
<p>In the same way, we will define the options for the other items types. Please see the comments to understand some of the properties used:</p>
<pre class="brush:js hljs php"><code><span class="hljs-comment">// Options for texts</span>
<span class="hljs-keyword">var</span> textOptions = {
    color: <span class="hljs-string">'white'</span>,
    backgroundColor: <span class="hljs-string">'#0066CC'</span>,
    fontSize: <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span> </span>{ <span class="hljs-keyword">return</span> windowWidth &gt; <span class="hljs-number">720</span> ? <span class="hljs-number">50</span> : <span class="hljs-number">30</span>; },
    padding: <span class="hljs-string">'15 20 10 20'</span>,
    angle: <span class="hljs-number">-45</span>,
    extraSpacing: {extraX: <span class="hljs-number">0</span>, extraY: <span class="hljs-number">300</span>},
    piecesWidth: <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span> </span>{ <span class="hljs-keyword">return</span> Pieces.random(<span class="hljs-number">50</span>, <span class="hljs-number">200</span>); },
    ty: <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span> </span>{ <span class="hljs-keyword">return</span> Pieces.random(<span class="hljs-number">-200</span>, <span class="hljs-number">200</span>); },
    translate: <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span> </span>{
        <span class="hljs-keyword">if</span> (windowWidth &gt; <span class="hljs-number">1120</span>) <span class="hljs-keyword">return</span> {translateX: <span class="hljs-number">200</span>, translateY: <span class="hljs-number">200</span>};
        <span class="hljs-keyword">if</span> (windowWidth &gt; <span class="hljs-number">720</span>) <span class="hljs-keyword">return</span> {translateX: <span class="hljs-number">0</span>, translateY: <span class="hljs-number">200</span>};
        <span class="hljs-keyword">return</span> {translateX: <span class="hljs-number">0</span>, translateY: <span class="hljs-number">100</span>};
    }
};

<span class="hljs-comment">// Options for numbers</span>
<span class="hljs-keyword">var</span> numberOptions = {
    color: <span class="hljs-string">'white'</span>,
    backgroundColor: <span class="hljs-string">'#0066CC'</span>,
    backgroundRadius: <span class="hljs-number">300</span>,
    fontSize: <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span> </span>{ <span class="hljs-keyword">return</span> windowWidth &gt; <span class="hljs-number">720</span> ? <span class="hljs-number">100</span> : <span class="hljs-number">50</span>; },
    padding: <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span> </span>{ <span class="hljs-keyword">return</span> windowWidth &gt; <span class="hljs-number">720</span> ? <span class="hljs-string">'18 35 10 38'</span> : <span class="hljs-string">'18 25 10 28'</span>; },
    angle: <span class="hljs-number">0</span>,
    piecesSpacing: <span class="hljs-number">2</span>,
    extraSpacing: {extraX: <span class="hljs-number">10</span>, extraY: <span class="hljs-number">10</span>},
    piecesWidth: <span class="hljs-number">35</span>,
    ty: <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span> </span>{ <span class="hljs-keyword">return</span> Pieces.random(<span class="hljs-number">-200</span>, <span class="hljs-number">200</span>); },
    translate: <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span> </span>{
        <span class="hljs-keyword">if</span> (windowWidth &gt; <span class="hljs-number">1120</span>) <span class="hljs-keyword">return</span> {translateX: <span class="hljs-number">-340</span>, translateY: <span class="hljs-number">-180</span>};
        <span class="hljs-keyword">if</span> (windowWidth &gt; <span class="hljs-number">720</span>) <span class="hljs-keyword">return</span> {translateX: <span class="hljs-number">-240</span>, translateY: <span class="hljs-number">-180</span>};
        <span class="hljs-keyword">return</span> {translateX: <span class="hljs-number">-140</span>, translateY: <span class="hljs-number">-100</span>};
    }
};
</code></pre>
<p>Now we have all the options for each type of item, lets put them togheter to pass it to the Pieces library!</p>
<pre class="brush:js hljs php"><code><span class="hljs-comment">// Build the array of items to draw using Pieces</span>
<span class="hljs-keyword">var</span> items = [];
<span class="hljs-keyword">var</span> imagesReady = <span class="hljs-number">0</span>;
<span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; slidesLength; i++) {
    <span class="hljs-comment">// Wait for all images to load before initializing the slider and event listeners</span>
    <span class="hljs-keyword">var</span> slideImage = <span class="hljs-keyword">new</span> Image();
    slideImage.onload = <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span> </span>{
        <span class="hljs-keyword">if</span> (++imagesReady == slidesLength) {
            initSlider();
            initEvents();
        }
    };
    <span class="hljs-comment">// Push all elements for each slide with the corresponding options</span>
    items.push({type: <span class="hljs-string">'image'</span>, value: imagesEl[i], options: imageOptions});
    items.push({type: <span class="hljs-string">'text'</span>, value: textEl[i].innerText, options: textOptions});
    items.push({type: <span class="hljs-string">'text'</span>, value: i + <span class="hljs-number">1</span>, options: numberOptions});
    <span class="hljs-comment">// Save indexes</span>
    textIndexes.push(i * <span class="hljs-number">3</span> + <span class="hljs-number">1</span>);
    numberIndexes.push(i * <span class="hljs-number">3</span> + <span class="hljs-number">2</span>);
    <span class="hljs-comment">// Set image src</span>
    slideImage.src = imagesEl[i].src;
}
</code></pre>
<p>In addition to building the array of elements, in the previous code block we defined a simple mechanism to call the <code>initSlider</code> function only when all the images have been loaded. This is very important, since we will not be able to use Pieces to draw an image that is not available.</p>
<p>So far, we’ve not draw anything yet, but we’re ready to do that now. Let’s see how we are initializing a new instance of Pieces.</p>
<pre class="brush:js hljs php"><code><span class="hljs-comment">// Save the new Pieces instance</span>
piecesSlider = <span class="hljs-keyword">new</span> Pieces({
    canvas: sliderCanvas, <span class="hljs-comment">// CSS selector to get the canvas</span>
    items: items, <span class="hljs-comment">// the Array of items we've built before</span>
    x: <span class="hljs-string">'centerAll'</span>, <span class="hljs-comment">// center all items in the X axis</span>
    y: <span class="hljs-string">'centerAll'</span>, <span class="hljs-comment">// center all items in the Y axis</span>
    piecesSpacing: <span class="hljs-number">1</span>, <span class="hljs-comment">// default spacing between pieces</span>
    fontFamily: [<span class="hljs-string">"'Helvetica Neue', sans-serif"</span>],
    animation: { <span class="hljs-comment">// animation options to use in any operation</span>
        duration: <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span> </span>{ <span class="hljs-keyword">return</span> Pieces.random(<span class="hljs-number">1000</span>, <span class="hljs-number">2000</span>); },
        easing: <span class="hljs-string">'easeOutQuint'</span>
    },
    debug: <span class="hljs-keyword">false</span> <span class="hljs-comment">// set `de<span class="hljs-doctag">bug:</span> true` to enable debug mode</span>
});
</code></pre>
<p>And now, all the items and pieces are ready to be animated. They are being actually created, but are hidden by default, so, let’s see how to show the first slide and start the animations we want:</p>
<pre class="brush:js hljs php"><code><span class="hljs-comment">// Animate all numbers to rotate clockwise indefinitely</span>
piecesSlider.animateItems({
    items: numberIndexes,
    duration: <span class="hljs-number">20000</span>,
    angle: <span class="hljs-number">360</span>,
    loop: <span class="hljs-keyword">true</span>
});

<span class="hljs-comment">// Show current items: image, text and number</span>
showItems();
</code></pre>
<p>So, to show and hide the current items we need to call <code>showItems</code> and <code>hideItems</code> functions respectively. We have implemented them as follows:</p>
<pre class="brush:js hljs javascript"><code><span class="hljs-comment">// Show current items: image, text and number</span>
<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">showItems</span>(<span class="hljs-params"></span>) </span>{
    <span class="hljs-comment">// Show image pieces</span>
    piecesSlider.showPieces({<span class="hljs-attr">items</span>: currentImageIndex, <span class="hljs-attr">ignore</span>: [<span class="hljs-string">'tx'</span>], <span class="hljs-attr">singly</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">update</span>: <span class="hljs-function">(<span class="hljs-params">anim</span>) =&gt;</span> {
        <span class="hljs-comment">// Stop the pieces animation at 60%, and run a new indefinitely animation of `ty` for each piece</span>
        <span class="hljs-keyword">if</span> (anim.progress &gt; <span class="hljs-number">60</span>) {
            <span class="hljs-keyword">var</span> piece = anim.animatables[<span class="hljs-number">0</span>].target;
            <span class="hljs-keyword">var</span> ty = piece.ty;
            anime.remove(piece);
            anime({
                <span class="hljs-attr">targets</span>: piece,
                <span class="hljs-attr">ty</span>: piece.h_ty &lt; <span class="hljs-number">300</span>
                    ? [{<span class="hljs-attr">value</span>: ty + <span class="hljs-number">10</span>, <span class="hljs-attr">duration</span>: <span class="hljs-number">1000</span>}, {<span class="hljs-attr">value</span>: ty - <span class="hljs-number">10</span>, <span class="hljs-attr">duration</span>: <span class="hljs-number">2000</span>}, {<span class="hljs-attr">value</span>: ty, <span class="hljs-attr">duration</span>: <span class="hljs-number">1000</span>}]
                    : [{<span class="hljs-attr">value</span>: ty - <span class="hljs-number">10</span>, <span class="hljs-attr">duration</span>: <span class="hljs-number">1000</span>}, {<span class="hljs-attr">value</span>: ty + <span class="hljs-number">10</span>, <span class="hljs-attr">duration</span>: <span class="hljs-number">2000</span>}, {<span class="hljs-attr">value</span>: ty, <span class="hljs-attr">duration</span>: <span class="hljs-number">1000</span>}],
                <span class="hljs-attr">duration</span>: <span class="hljs-number">2000</span>,
                <span class="hljs-attr">easing</span>: <span class="hljs-string">'linear'</span>,
                <span class="hljs-attr">loop</span>: <span class="hljs-literal">true</span>
            });
        }
    }});
    <span class="hljs-comment">// Show pieces for text and number, using alternate `ty` values</span>
    piecesSlider.showPieces({<span class="hljs-attr">items</span>: currentTextIndex});
    piecesSlider.showPieces({<span class="hljs-attr">items</span>: currentNumberIndex, <span class="hljs-attr">ty</span>: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">p, i</span>) </span>{ <span class="hljs-keyword">return</span> p.s_ty - [<span class="hljs-number">-3</span>, <span class="hljs-number">3</span>][i % <span class="hljs-number">2</span>]; }});
}

<span class="hljs-comment">// Hide current items: image, text and number</span>
<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">hideItems</span>(<span class="hljs-params"></span>) </span>{
    piecesSlider.hidePieces({<span class="hljs-attr">items</span>: [currentImageIndex, currentTextIndex, currentNumberIndex]});
}
</code></pre>
<p>And finally to navigate through the slides, we’ve defined these functions:</p>
<pre class="brush:js hljs php"><code><span class="hljs-comment">// Select the prev slide: hide current items, update indexes, and show the new current item</span>
<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">prevItem</span><span class="hljs-params">()</span> </span>{
    hideItems();
    currentIndex = currentIndex &gt; <span class="hljs-number">0</span> ? currentIndex - <span class="hljs-number">1</span> : slidesLength - <span class="hljs-number">1</span>;
    updateIndexes();
    showItems();
}

<span class="hljs-comment">// Select the next slide: hide current items, update indexes, and show the new current item</span>
<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">nextItem</span><span class="hljs-params">()</span> </span>{
    hideItems();
    currentIndex = currentIndex &lt; slidesLength - <span class="hljs-number">1</span> ? currentIndex + <span class="hljs-number">1</span> : <span class="hljs-number">0</span>;
    updateIndexes();
    showItems();
}
</code></pre>
<p>So we need to call those functions if the navigation buttons are clicked, or some of the arrow keys (<code>left</code> or <code>right</code>) are pressed:</p>
<pre class="brush:js hljs javascript"><code><span class="hljs-comment">// Select prev or next slide using buttons</span>
prevButtonEl.addEventListener(<span class="hljs-string">'click'</span>, prevSlide);
nextButtonEl.addEventListener(<span class="hljs-string">'click'</span>, nextSlide);

<span class="hljs-comment">// Select prev or next slide using arrow keys</span>
<span class="hljs-built_in">document</span>.addEventListener(<span class="hljs-string">'keydown'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) </span>{
    <span class="hljs-keyword">if</span> (e.keyCode == <span class="hljs-number">37</span>) { <span class="hljs-comment">// left</span>
        prevSlide();
    } <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (e.keyCode == <span class="hljs-number">39</span>) { <span class="hljs-comment">// right</span>
        nextSlide();
    }
});
</code></pre>
<p>We are almost done :) We just need to implement a responsive behavior, listening to the <code>resize</code> event, saving the current window <code>width</code>, and reinitializing the slider:</p>
<pre class="brush:js hljs javascript"><code><span class="hljs-comment">// Handle `resize` event</span>
<span class="hljs-built_in">window</span>.addEventListener(<span class="hljs-string">'resize'</span>, resizeStart);

<span class="hljs-keyword">var</span> initial = <span class="hljs-literal">true</span>, hideTimer, resizeTimer;

<span class="hljs-comment">// User starts resizing, so wait 300 ms before reinitialize the slider</span>
<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">resizeStart</span>(<span class="hljs-params"></span>) </span>{
    <span class="hljs-keyword">if</span> (initial) {
        initial = <span class="hljs-literal">false</span>;
        <span class="hljs-keyword">if</span> (hideTimer) clearTimeout(hideTimer);
        sliderCanvas.classList.add(<span class="hljs-string">'pieces-slider__canvas--hidden'</span>);
    }
    <span class="hljs-keyword">if</span> (resizeTimer) clearTimeout(resizeTimer);
    resizeTimer = setTimeout(resizeEnd, <span class="hljs-number">300</span>);
}

<span class="hljs-comment">// User ends resizing, then reinitialize the slider</span>
<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">resizeEnd</span>(<span class="hljs-params"></span>) </span>{
    initial = <span class="hljs-literal">true</span>;
    windowWidth = <span class="hljs-built_in">window</span>.innerWidth;
    initSlider();
    hideTimer = setTimeout(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> {
        sliderCanvas.classList.remove(<span class="hljs-string">'pieces-slider__canvas--hidden'</span>);
    }, <span class="hljs-number">500</span>);
}
</code></pre>
<p>And we are finally done!</p>
<p>We really hope this tutorial has been useful, and that you have found inspiration in these effects!</p>

																
																	
																
									
																
							</div>
						</article>
						<p class="ct-tags">
							Tagged with: <a href="http://www.ayudaparamiweb.com/" rel="tag">animation</a> <a href="http://www.ayudaparamiweb.com/" rel="tag">canvas</a> <a href="http://www.ayudaparamiweb.com/" rel="tag">slideshow</a>						</p>
						<div class="clr"></div>
					</div>

											<div class="ct-row">
							<div class="ct-author-info ct-box">
								<div class="ct-author-avatar">
									<img alt="" src="http://www.ayudaparamiweb.com/img/author/sucender.png" srcset="img/author/sucender.png" class="avatar avatar-80 photo" height="80" width="80">								</div>
								<div class="ct-author-page-desc">
									<h4><a href="http://www.ayudaparamiweb.com/" title="Posts by Sucender" rel="author">Sucender</a></h4>
									<p>
										Sucender is an engineer in computer science and front-end developer, passionate about web design, HTML, CSS and JavaScript. Available for <a href="mailto:sucender@gmail.com">hire</a>.									</p>
									<p class="ct-author-page-url"><strong>View all contributions by <a href="http://www.ayudaparamiweb.com/" title="Posts by Sucender" rel="author">Sucender</a></strong></p>
																		
																											<p class="ct-author-page-url">
										<strong>Website: </strong>
										<a href="http://www.ayudaparamiweb.com/" target="_blank">http://www.ayudaparamiweb.com/</a>
									</p>
																		
									<div>
										<ul class="ct-social-profiles">
										
											<li><a class="ct-social-twitter" href="https://twitter.com/ayudaparamiweb">https://twitter.com/ayudaparamiweb<span>Sucender on Twitter</span></a></li>
																																																																																									<li><a class="ct-social-github" href="https://github.com/ayudaparamiweb">https://github.com/ayudaparamiweb<span>Sucender on Github</span></a></li>
																																																																												</ul>
									</div>
								</div>
								<div class="clr"></div>
							</div>
						</div>

							
<div class="ct-sharing ct-box">
	<h4>Stay connected with us:</h4>
	<div class="ct-link-list">
		<a href="http://feeds2.feedburner.com/tympanus" class="ct-link-list-rss">Grab the <strong>RSS Feed</strong></a>
		<a href="http://feedburner.google.com/fb/a/mailverify?uri=tympanus&amp;loc=en_US" class="ct-link-list-mail">Get <strong>email updates</strong></a>
		<a href="http://www.twitter.com/codrops" class="ct-link-list-twitter">Follow us on <strong>Twitter</strong></a>
		<a href="http://www.facebook.com/pages/Codrops/159107397912" class="ct-link-list-fb">Join us on <strong>Facebook</strong></a>
		<a href="https://plus.google.com/101095823814290637419/?prsrc=3" class="ct-link-list-gplus">Add us on <strong>Google+</strong></a>
	</div>
</div>
							<div class="ct-bottom-ads ct-box">
								<h4>CSS Reference</h4>
								<p>Learn about all important CSS properties from the basics with our extensive and easy-to-read CSS Reference.</p><p>It doesn't matter if you are a beginner or intermediate, start learning CSS now.</p>
							</div>
						</div>
					</div>
				</div>
		
				<aside class="ct-sidebar">		
					
					<% include ../partials/aside.ejs %>	
					
				</aside>
	
			<div class="clr"></div>
				
			</div><!--//ct-inner-->
			
		</div><!--//ct-content-->

		<footer class="ct-footer">
			
			<div class="ct-inner ct-cf">
				<nav class="ct-cf">
					<ul>
						<li><a href="/">Tutoriales</a></li>
						<li><a href="/">Articulos</a></li>
						<li><a href="/">Herramientas</a></li>
						<li><a href="/">Experimentos</a></li>
						<li><a href="/">Experiencias</a></li>
					</ul>
					<ul>
						<li><a href="/">News</a></li>
						<li><a href="/">Giveaways</a></li>
						<li><a href="/">Freebies</a></li>
						<li><a href="/">Collective</a></li>
					</ul>
					<ul>
						<li><a href="/">About</a></li>
						<li><a href="/">Contact</a></li>
						<li><a href="/">Archives</a></li>
						<li><a href="/">Deals</a></li>
					</ul>
					<ul>
						<li><a href="/">Advertencia</a></li>
						<li><a href="/">Política de Privacidad</a></li>
						<li><a href="/">Licencia</a></li>
						<li><a href="/">Creditos</a></li>
					</ul>
				</nav>
				<div class="ct-items ct-cf">
					<div class="ct-item ct-copyright">
						<span>© 2018 ayudaparamiweb.com</span> 
						<a href="http://www.ayudaparamiweb.com/" title="Ayuda para mi Web">Ayuda para mi Web</a>
					</div>
				</div>
			</div>
		</footer>
		
		<script type="text/javascript" src="js/typeahead.min.js"></script>
		<script type="text/javascript" src="js/hogan.min.js"></script>
		<script type="text/javascript" src="js/wp-typeahead.js"></script>
		<script type="text/javascript" src="js/wp-embed.min.js"></script>
		</div><!--ct-container-->

	</body>
 </html>
